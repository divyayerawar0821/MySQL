#Database Queries

create database school;
create database if not exists school;
drop database school;
drop database if exists school;
use school;
show databases;

#Table Queries

create table student (sname varchar(50), srollno int primary key, sfees int);
create table teacher (tname varchar(60), tid int primary key, tsalary int);
insert into student(sname,srollno,sfees)  values('Divya',101,1000);
insert into student(sname,srollno,sfees) values ('Adwait',102,2000),('Rutuja',103,3000),('Pooja',104,4000);
select * from student;
select sname from student;
show tables;

#Create Instagram Database

create database if not exists instagramDB;
use instagramdb;
create table if not exists users(userid int primary key, username varchar (50), email varchar(100));
create table if not exists posts(postsid int primary key, userid int, caption varchar(100));
insert into users(userid,username,email) Values(101,'divya','divya@gmail.com'),(102,'Rutuja','rutuja@gmail.com'),(103,"Adwait",'Adwait@gmail.com');
insert into posts(postsid,userid,caption) Values(1,231,'light'),(2,232,'air'),(3,233,'water');
show tables;
select * from users;
select * from posts;


#There are 6 constraints in SQL
#1.Unique Constraint
#2.Check Constraint
#3.Not null constraint
#4.Default Constraint
#5.Primary Key Constraint
#6.Foreign Key COnstraint




#Constraints Queries
create database if not exists college;
use college;

#unique constraint
create table STUDENT(phonebr int unique);
insert into student(phonebr) values(123),(456),(123); #this gives error as u defined this is unique constraint and u are inserting duplicate values
insert into student(phonebr) values(123),(456),(789); # so u have to insert unique values in phonebr column
select phonebr from student;
drop table student;

#not null constraint
create table student1(age int, rollno int not null);
insert into student1(age) values(27); # this will throw error as u defined roll no is not null constraint and u have to pass some values because by default it won't take null values as it is mandatory field.
insert into student1(age,rollno) values (27,101);
select * from student1;

#check constraint
create table student3(age int check(age>18));
insert into student3(age) values(15); #It will throw an error as we apply the check constraint on age as > 18
insert into student3(age) values(19); 

#Default Constraint
create table student4(schoolname varchar(50) default 'Universal');
insert into student4() values();
select * from student4;

#primary key constraint
create table student5(age int, rollno int primary key);
#uniqueness 
insert into student5(age,rollno) values (12,101), (13,102), (40,102); #throw error as we are inserting duplicate values and we assign rollno as primary key

#not null 
insert into student5(age,rollno) values (12);

#Foreign Key Constraint
create table course(coursename varchar(50), rollno int, foreign key (rollno) references student5(rollno));


#Foreign Key
create database company;
use company;

create table employee( empid int primary key, empname varchar(50), empsalary int);
create table managers(empid int, mngname varchar(50), mngsalary int, foreign key (empid) references employee(empid));


#update command
insert into employee(empid, empname, empsalary) values (184968,"Divya",1000), (175539,"Parth",2000),(12345,"Rutuja",5000);
select * from employee;
set sql_safe_updates=0;
update employee set empsalary=12000 where empname="Divya";

#delete command
delete from employee where empsalary=5000;

#select command
select * from employee;
select empsalary, empname from employee;

#where clause
select * from employee where empname="Divya";


#Alter Command
#alter command is used to modification or changes on schema, table and database.
#using alter command we can add,modify and delete the columns.alter

use company;

#add column using alter
alter table employee add (empaddress varchar(50) not null);
select * from employee;
set sql_safe_updates=0;
update employee set empaddress="Magarpatta,Pune" where empname="Divya";
select * from employee;
update employee set empaddress="Magarpatta,Pune" where empname="Divya";

alter table employee add mngaddress varchar(50);

#drop column using alter
alter table employee drop column mngaddress;

#modify datatype of column using alter
alter table employee modify empaddress text;

#we can change column name and datatype using alter command
alter table employee change empaddress empaddres text;
alter table employee change empaddres empaddress varchar(50);

#rename using alter
alter table employee rename column empaddress to address;

#Rename Command : it depend on server to server
rename table employee to employee_details;


use company;
#rename database company to company_details;



use instagramdb;
select * from users;

#truncate command
truncate table users;

use company;
select * from employee_details;
insert into employee_details(empid,empname,empsalary,address) values (1345678,"Divya",3000,"Dhanki");

#distinct keyword : to fetch distinct value from columns  and retrieve distinct combination of columns
select distinct empname from employee_details;
select * from employee_details;

#retrieve distinct combination of columns
select distinct empname,empsalary from employee_details;

#Operations in SQL
#Arithmetic Operators : Addition(+) , Subtraction(-), multiplication(*), Division(/) , modulus(%)

select * from employee_details;
select empsalary+1 as new_empsalary from employee_details;
select * from employee_details;

#Logical Operators
# AND OR NOT are logical operators in SQL

# AND : if both condition are true then only it will give result
select * from employee_details where empname = "Divya" and empsalary = 3000;

#OR : If any of the one condition is true then it will give give result
select * from employee_details where address = "Dhanki" OR empsalary=500;

#NOT : 
select * from employee_details;
select * from employee_details where not empname = "Divya";

# there two more operators NOT IN and IN in SQL
select * from employee_details;

# IN Operator 
select * from employee_details where empsalary in (2000,3000);

# NOT IN Operator 
select * from employee_details where empsalary not in (2000,3000);

# IS NULL and IS NOT NULL Operators in SQL
#IS NULL : Check for null values in that column
# IS NOT NULL : Check for not null values in that column

select * from employee_details;

#IS NULL
select * from employee_details where empsalary is null;

#IS NOT NULL
select * from employee_details where empsalary is not null;

#Bitwise Operator
#AND (&) OR (|) perform operations on bits

#LIKE Operators :  % and _

#% (Percent Sign): It matches for any sequence of zero or more characters
select * from employee_details where empname like 'P%';


# _ (Underscore) : It matches for any single character
select empname from employee_details where empname like '____a%';

use company;
select empname from employee_details where empname like '_a%';

#Between operator : check the value lies between the given range 

select * from employee_details;
select empsalary from employee_details where empsalary between 1000 and 5000;

#Clauses in SQL : where, group by, order by, having , limit
#clauses are used to fecth data base on specific condition


#1. where clause
select * from employee_details;
select empname,empsalary from employee_details where empsalary < 3000;

#Limit Clause : This clause used is used to limit the no of rows returned by query : retrieve first n row 
select * from employee_details limit 2;

#order by clause : to sort the data in ascending and descending order
#Note by default it will sort in ascending order if didn't provide ASC / DESC
select * from employee_details order by empsalary asc;
select * from employee_details order by empsalary desc;
select * from employee_details order by empsalary;

#Query to fectch the two employee having maximum salary
select * from employee_details  order by empsalary desc limit 2;

#Aggregate Functions : Aggregate function perform some operations on  set of rows and then returns a single value summarizing the data
#These are used with select statement to perform some calculations

#Types of Aggregate function
#1.COUNT() : Count the number of rows in a table.
#2.SUM() : 
#3.AVG()
#4.MIN()
#5.MAX()
#6.GROUP_CONCAT()

#COUNT() 
use company;
select count(*) from employee_details;
select count(empsalary) from employee_details;

#SUM() : do the sum of all values present in numeric column
select sum(empsalary) from employee_details;

#AVG() : It computes the avg of numeric values in numeric column
select avg(empsalary) from employee_details;

#MIN() : It finds the minimum / smallest value from a numeric column
select min(empsalary) from employee_details;

#MAX() : It finds the maximum/largest value from numeric column
select max(empsalary) from employee_details;

#GROUP_CONCAT 

#GROUP BY clause
select empname, avg(empsalary)from employee_details group by empname;

#having clause : only works on aggregated data
select empname, avg(empsalary) as avgsalary from employee_details group by empname having avgsalary > 2000;

use company;
select empname, empsalary from employee_details;
select empname, avg(empsalary) as avgsalary from employee_details group by empname having avgsalary > 1200;

select avg(empsalary) from employee_details;

#Joins in SQL : To join two or more tables we used joins 
#There are 6 types of joins in SQL
   # 1.Inner Join : fetch common records from two tables.
   # 2.Left Join/ Left Outer Join : fetch records from left table and also common records from both the tables.
   # 3.Right Join/ Right Outer Join : fetch records from right table and also common records from both the tables
   # 4.Full Join/ Full Outer Join : fetch all the records from both the table
   # 5.Self Join : This join will apply on same table there is only one table in this join
   # 6.Cross Join : Perform cartesian or multiplication of both the tables if we have m rows in one table and n rows in other table then it will fetch the records of m*n

#Joins Queries
use company;
create table student(id int primary key,name varchar(50));
insert into student(id,name) values(101,"Ram"),(102,"Rahul"),(103,"Riti");

rename table student to customer;

use company;

create table c_order (id int, o_name varchar(50));
insert into c_order(id,o_name) values(102,"Fruit"),(103,"Ball"),(104,"Umbrella");


#Inner Join Query : It will fetch common records from both the tables

select * from customer inner join c_order on customer.id = c_order.id;  #get the id from both the tables
select customer.id ,customer.name,c_order.o_name from customer inner join c_order on customer.id = c_order.id;

# Left Join/ Left Outer Join : It will fetch all record from left table and common records from both the tables

select * from customer left join c_order on customer.id = c_order.id;
select customer.id, customer.name, c_order.o_name from customer left join c_order on customer.id = c_order.id;


#Right Join

select * from customer right join c_order on customer.id=c_order.id;

use company;
select customer.id, customer.name, c_order.o_name from customer right join c_order on customer.id=c_order.id;

# Full Join

select customer.id, customer.name from customer left join c_order on customer.id = c_order.id UNION select * from customer right join c_order on customer.id=c_order.id;

#cross join : m*n
use company;
select * from customer cross join c_order;
select count(*) from customer cross join c_order;

#Exclusive Join : means combine the records which are not common between two tables
#there are 3 types of exclusive join
# 1. Left Exclusive Join : means fetch the records only from left table and not the common records between right and left table
# 2. Right Exclusive Join : means fetch the records only from right table and not the common records between right and left table
# 3. Full Exclusive Join : means fetch the all records from left and right table except the common records from both the table

# Left Exclusive Join Query
select * from customer;
select * from c_order;
select * from customer left join  c_order on customer.id = c_order.id;
select * from customer Left join  c_order on customer.id = c_order.id where c_order.id is null;

# Right Exclusive Join Query
select * from customer right join  c_order on customer.id = c_order.id where customer.id is null;

# Full Exclusive Join Query

select * from customer Left join  c_order on customer.id = c_order.id where c_order.id is null 
UNION
select * from customer right join  c_order on customer.id = c_order.id where customer.id is null;

#UNION operator in SQL: union operator in SQL is used to combine the results of two or more select queries into a single result set and gives unique rows by removing the duplictes rows.
select customer.id from customer UNION select c_order.id from c_order;

#UNION ALL in SQL : union operator in SQL is used to combine the results of two or more select queries into a single result set but does not  remove the duplictes rows.
select customer.id from customer UNION ALL select c_order.id from c_order;

#Subqueries/Inner Queries/ Nested Queries : SQL subquery is nested between the another SQL statement. whenever we want to retrieve data based on the result of another query we used nested queries.
#Subqueries can be used with different clauses such as select,insert,update or delete. 
# It also with where clause based  on the filter condition
# we can also used the subquery with from clause : select * from (subquery) as altname;

use company;
select * from employee_details;
select empname, empsalary from employee_details where empsalary > (select min(empsalary) from employee_details);

select (select avg(empsalary) from employee_details) as avg_salary, empsalary from employee_details;


select max(empsalary) as second_max_empsalary from employee_details where empsalary  < (select max(empsalary) from employee_details);
select max(empsalary) as third_max_empsalary from employee_details where empsalary  < (select max(empsalary) from employee_details where empsalary < (select max(empsalary) from employee_details));

#Limit Clause : limit clause is used to restrict the number of rows returned by query.

#Limit n : It helps to retrieve the a maximum of n rows from the beginning of the result set

# Limit m,n : It used to retrieve the specific no of rows 
#m : number of rows to skip from beginning
# n : number of rows to fetch after skipping

# 3th highest salary
select distinct empsalary from employee_details order by empsalary desc limit 2 ,1;

# View in SQL  : A view is virtual table in SQL. It helps to provide a filter view of data for security process.
# It helps for data abstraction , security purpose etc. for ex. in employee_details table if we have password to secure such details of employee we can just extract those columns in view table which we want to show people.

create view employeeview as select empid, empname, empsalary from employee_details;

select empid from employeeview;
